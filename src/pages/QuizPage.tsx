import React, { useState } from 'react';
import Footer from '../components/Footer';
import './QuizPage.css';

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

const QuizPage: React.FC = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [userAnswers, setUserAnswers] = useState<(number | null)[]>([]);

  const questions: Question[] = [
    {
      id: 1,
      question: "Trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n ch·ªß nghƒ©a x√£ h·ªôi, giai c·∫•p n√†o gi·ªØ vai tr√≤ l√£nh ƒë·∫°o?",
      options: [
        "Giai c·∫•p n√¥ng d√¢n",
        "Giai c·∫•p c√¥ng nh√¢n", 
        "T·∫ßng l·ªõp tr√≠ th·ª©c",
        "Giai c·∫•p t∆∞ s·∫£n"
      ],
      correctAnswer: 1,
      explanation: "Giai c·∫•p c√¥ng nh√¢n gi·ªØ vai tr√≤ l√£nh ƒë·∫°o trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n ch·ªß nghƒ©a x√£ h·ªôi th√¥ng qua ƒê·∫£ng C·ªông s·∫£n."
    },
    {
      id: 2,
      question: "Li√™n minh giai c·∫•p c∆° b·∫£n trong th·ªùi k·ª≥ qu√° ƒë·ªô l√† g√¨?",
      options: [
        "Li√™n minh c√¥ng - n√¥ng",
        "Li√™n minh c√¥ng - n√¥ng - tr√≠",
        "Li√™n minh n√¥ng - tr√≠",
        "Li√™n minh t∆∞ s·∫£n - ti·ªÉu t∆∞ s·∫£n"
      ],
      correctAnswer: 1,
      explanation: "Li√™n minh c√¥ng - n√¥ng - tr√≠ l√† li√™n minh giai c·∫•p c∆° b·∫£n trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n ch·ªß nghƒ©a x√£ h·ªôi."
    },
    {
      id: 3,
      question: "ƒê·∫∑c ƒëi·ªÉm n√†o sau ƒë√¢y KH√îNG thu·ªôc v·ªÅ giai c·∫•p c√¥ng nh√¢n?",
      options: [
        "L√† s·∫£n ph·∫©m c·ªßa n·ªÅn ƒë·∫°i c√¥ng nghi·ªáp",
        "C√≥ t√≠nh t·ªï ch·ª©c, k·ª∑ lu·∫≠t cao",
        "C√≥ √Ω th·ª©c giai c·∫•p r√µ r√†ng",
        "C√≥ t∆∞ li·ªáu s·∫£n xu·∫•t ri√™ng"
      ],
      correctAnswer: 3,
      explanation: "Giai c·∫•p c√¥ng nh√¢n kh√¥ng c√≥ t∆∞ li·ªáu s·∫£n xu·∫•t ri√™ng, h·ªç b√°n s·ª©c lao ƒë·ªông cho ch·ªß s·ªü h·ªØu t∆∞ li·ªáu s·∫£n xu·∫•t."
    },
    {
      id: 4,
      question: "T·∫ßng l·ªõp tr√≠ th·ª©c c√≥ vai tr√≤ g√¨ trong x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi?",
      options: [
        "L√£nh ƒë·∫°o c√°ch m·∫°ng",
        "Cung c·∫•p l∆∞∆°ng th·ª±c, th·ª±c ph·∫©m",
        "Truy·ªÅn b√° tri th·ª©c, vƒÉn h√≥a",
        "S·∫£n xu·∫•t h√†ng h√≥a c√¥ng nghi·ªáp"
      ],
      correctAnswer: 2,
      explanation: "T·∫ßng l·ªõp tr√≠ th·ª©c c√≥ vai tr√≤ truy·ªÅn b√° tri th·ª©c, vƒÉn h√≥a v√† l√† l·ª±c l∆∞·ª£ng quan tr·ªçng trong c√°ch m·∫°ng khoa h·ªçc - k·ªπ thu·∫≠t."
    },
    {
      id: 5,
      question: "Th·ªùi k·ª≥ qu√° ƒë·ªô l√™n ch·ªß nghƒ©a x√£ h·ªôi c√≥ t√≠nh ch·∫•t g√¨?",
      options: [
        "T√≠nh ch·∫•t chuy·ªÉn ti·∫øp",
        "T√≠nh ch·∫•t ·ªïn ƒë·ªãnh",
        "T√≠nh ch·∫•t tƒ©nh t·∫°i",
        "T√≠nh ch·∫•t ƒë∆°n gi·∫£n"
      ],
      correctAnswer: 0,
      explanation: "Th·ªùi k·ª≥ qu√° ƒë·ªô c√≥ t√≠nh ch·∫•t chuy·ªÉn ti·∫øp t·ª´ ch·∫ø ƒë·ªô c≈© sang ch·∫ø ƒë·ªô m·ªõi, v·ª´a mang t√≠nh ch·∫•t c·ªßa ch·∫ø ƒë·ªô c≈© v·ª´a mang t√≠nh ch·∫•t c·ªßa ch·∫ø ƒë·ªô m·ªõi."
    },
    {
      id: 6,
      question: "Nguy√™n t·∫Øc n√†o sau ƒë√¢y KH√îNG thu·ªôc v·ªÅ li√™n minh giai c·∫•p?",
      options: [
        "Nguy√™n t·∫Øc l√£nh ƒë·∫°o",
        "Nguy√™n t·∫Øc t·ª± nguy·ªán",
        "Nguy√™n t·∫Øc b√¨nh ƒë·∫≥ng",
        "Nguy√™n t·∫Øc ƒë·ªëi kh√°ng"
      ],
      correctAnswer: 3,
      explanation: "Li√™n minh giai c·∫•p d·ª±a tr√™n s·ª± h·ª£p t√°c, kh√¥ng ph·∫£i ƒë·ªëi kh√°ng. C√°c nguy√™n t·∫Øc c∆° b·∫£n l√† l√£nh ƒë·∫°o, t·ª± nguy·ªán, b√¨nh ƒë·∫≥ng v√† c√πng c√≥ l·ª£i."
    },
    {
      id: 7,
      question: "Giai c·∫•p n√¥ng d√¢n c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
      options: [
        "L√† l·ª±c l∆∞·ª£ng lao ƒë·ªông ƒë√¥ng ƒë·∫£o nh·∫•t",
        "C√≥ t√≠nh ch·∫•t t·∫≠p trung cao",
        "C√≥ √Ω th·ª©c giai c·∫•p r·∫•t cao",
        "L√† giai c·∫•p l√£nh ƒë·∫°o"
      ],
      correctAnswer: 0,
      explanation: "Giai c·∫•p n√¥ng d√¢n l√† l·ª±c l∆∞·ª£ng lao ƒë·ªông ƒë√¥ng ƒë·∫£o nh·∫•t, c√≥ m·ªëi li√™n h·ªá ch·∫∑t ch·∫Ω v·ªõi ƒë·∫•t ƒëai v√† l√† ƒë·ªìng minh t·ª± nhi√™n c·ªßa giai c·∫•p c√¥ng nh√¢n."
    },
    {
      id: 8,
      question: "ƒê·∫£ng C·ªông s·∫£n c√≥ vai tr√≤ g√¨ trong li√™n minh giai c·∫•p?",
      options: [
        "L√† th√†nh vi√™n b√¨nh th∆∞·ªùng",
        "L√† l·ª±c l∆∞·ª£ng l√£nh ƒë·∫°o, t·ªï ch·ª©c v√† th·ª±c hi·ªán",
        "Ch·ªâ c√≥ vai tr√≤ t∆∞ v·∫•n",
        "Kh√¥ng c√≥ vai tr√≤ g√¨"
      ],
      correctAnswer: 1,
      explanation: "ƒê·∫£ng C·ªông s·∫£n l√† l·ª±c l∆∞·ª£ng l√£nh ƒë·∫°o, t·ªï ch·ª©c v√† th·ª±c hi·ªán li√™n minh giai c·∫•p, ƒëi·ªÅu h√≤a l·ª£i √≠ch v√† gi·∫£i quy·∫øt m√¢u thu·∫´n."
    },
    {
      id: 9,
      question: "Nhi·ªám v·ª• ch√≠nh tr·ªã c·ªßa th·ªùi k·ª≥ qu√° ƒë·ªô KH√îNG bao g·ªìm:",
      options: [
        "X√¢y d·ª±ng nh√† n∆∞·ªõc x√£ h·ªôi ch·ªß nghƒ©a",
        "Th·ª±c hi·ªán d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a",
        "X√¢y d·ª±ng h·ªá th·ªëng ph√°p lu·∫≠t x√£ h·ªôi ch·ªß nghƒ©a",
        "Ph√°t tri·ªÉn kinh t·∫ø t∆∞ b·∫£n ch·ªß nghƒ©a"
      ],
      correctAnswer: 3,
      explanation: "Ph√°t tri·ªÉn kinh t·∫ø t∆∞ b·∫£n ch·ªß nghƒ©a kh√¥ng ph·∫£i l√† nhi·ªám v·ª• c·ªßa th·ªùi k·ª≥ qu√° ƒë·ªô. Nhi·ªám v·ª• l√† x√¢y d·ª±ng n·ªÅn kinh t·∫ø th·ªã tr∆∞·ªùng ƒë·ªãnh h∆∞·ªõng x√£ h·ªôi ch·ªß nghƒ©a."
    },
    {
      id: 10,
      question: "C∆° c·∫•u x√£ h·ªôi trong th·ªùi k·ª≥ qu√° ƒë·ªô c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
      options: [
        "·ªîn ƒë·ªãnh, kh√¥ng thay ƒë·ªïi",
        "Bi·∫øn ƒë·ªïi s√¢u s·∫Øc v√† to√†n di·ªán",
        "Ch·ªâ thay ƒë·ªïi v·ªÅ kinh t·∫ø",
        "Kh√¥ng c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨"
      ],
      correctAnswer: 1,
      explanation: "C∆° c·∫•u x√£ h·ªôi trong th·ªùi k·ª≥ qu√° ƒë·ªô c√≥ s·ª± bi·∫øn ƒë·ªïi s√¢u s·∫Øc v√† to√†n di·ªán, t·ª´ c∆° c·∫•u c≈© sang c∆° c·∫•u m·ªõi ph√π h·ª£p v·ªõi ch·ªß nghƒ©a x√£ h·ªôi."
    }
  ];

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleSubmitAnswer = () => {
    if (selectedAnswer === null) return;
    
    const newUserAnswers = [...userAnswers];
    newUserAnswers[currentQuestion] = selectedAnswer;
    setUserAnswers(newUserAnswers);

    if (selectedAnswer === questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }

    setShowResult(true);
  };

  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(userAnswers[currentQuestion + 1] || null);
      setShowResult(false);
    } else {
      setQuizCompleted(true);
    }
  };

  const handleRestartQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setQuizCompleted(false);
    setUserAnswers([]);
  };

  const getScoreMessage = () => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 90) return "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c v·ªÅ ch·ªß ƒë·ªÅ n√†y.";
    if (percentage >= 80) return "T·ªët! B·∫°n c√≥ hi·ªÉu bi·∫øt t·ªët v·ªÅ ch·ªß ƒë·ªÅ.";
    if (percentage >= 70) return "Kh√°! B·∫°n c·∫ßn √¥n t·∫≠p th√™m m·ªôt s·ªë ph·∫ßn.";
    if (percentage >= 60) return "Trung b√¨nh! B·∫°n n√™n xem l·∫°i l√Ω thuy·∫øt.";
    return "C·∫ßn c·∫£i thi·ªán! H√£y ƒë·ªçc l·∫°i l√Ω thuy·∫øt v√† l√†m l·∫°i quiz.";
  };

  if (quizCompleted) {
    return (
      <div className="quiz-page">
        <div className="quiz-container">
          <div className="quiz-completed">
            <h1>üéâ Ho√†n th√†nh Quiz!</h1>
            <div className="score-display">
              <h2>K·∫øt qu·∫£ c·ªßa b·∫°n</h2>
              <div className="score-circle">
                <span className="score-number">{score}</span>
                <span className="score-total">/{questions.length}</span>
              </div>
              <div className="score-percentage">
                {Math.round((score / questions.length) * 100)}%
              </div>
            </div>
            <p className="score-message">{getScoreMessage()}</p>
            <button className="restart-btn" onClick={handleRestartQuiz}>
              L√†m l·∫°i Quiz
            </button>
          </div>
        </div>
        
        {/* Footer */}
        <Footer />
      </div>
    );
  }

  return (
    <div className="quiz-page">
      <div className="quiz-container">
        <div className="quiz-header">
          <h1>Quiz Tr·∫Øc Nghi·ªám</h1>
          <p>C∆° c·∫•u x√£ h·ªôi - Giai c·∫•p v√† Li√™n minh giai c·∫•p</p>
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
            ></div>
          </div>
          <div className="question-counter">
            C√¢u {currentQuestion + 1} / {questions.length}
          </div>
        </div>

        <div className="question-container">
          <div className="question-card">
            <h2 className="question-text">
              {questions[currentQuestion].question}
            </h2>
            
            <div className="options-container">
              {questions[currentQuestion].options.map((option, index) => (
                <label 
                  key={index} 
                  className={`option-item ${selectedAnswer === index ? 'selected' : ''} ${
                    showResult && index === questions[currentQuestion].correctAnswer ? 'correct' : ''
                  } ${showResult && selectedAnswer === index && index !== questions[currentQuestion].correctAnswer ? 'incorrect' : ''}`}
                >
                  <input
                    type="radio"
                    name="answer"
                    value={index}
                    checked={selectedAnswer === index}
                    onChange={() => handleAnswerSelect(index)}
                    disabled={showResult}
                  />
                  <span className="option-text">{option}</span>
                </label>
              ))}
            </div>

            {showResult && (
              <div className="result-explanation">
                <h3>Gi·∫£i th√≠ch:</h3>
                <p>{questions[currentQuestion].explanation}</p>
              </div>
            )}

            <div className="quiz-actions">
              {!showResult ? (
                <button 
                  className="submit-btn"
                  onClick={handleSubmitAnswer}
                  disabled={selectedAnswer === null}
                >
                  X√°c nh·∫≠n
                </button>
              ) : (
                <button className="next-btn" onClick={handleNextQuestion}>
                  {currentQuestion < questions.length - 1 ? 'C√¢u ti·∫øp theo' : 'Xem k·∫øt qu·∫£'}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Footer */}
      <Footer />
    </div>
  );
};

export default QuizPage;